require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MembersController, type: :controller do

  let(:member) { create(:member) }

  describe '#index' do
    it 'assigns all members as @members' do
      get :index
      expect(assigns(:members)).to eq([member])
    end
  end

  describe '#show' do
    it 'assigns the requested member as @member' do
      get :show, {:id => member.id}

      expect(response.status).to eql(200)
      expect(assigns(:member)).to eq(member)
    end
  end

  describe '#new' do
    it 'assigns a new member as @member' do
      get :new

      expect(response.status).to eql(200)
      expect(assigns(:member)).to be_a_new(Member)
    end
  end

  describe '#edit' do
    it 'assigns the requested member as @member' do
      get :edit, {:id => member.id}

      expect(response.status).to eql(200)
      expect(assigns(:member)).to eq(member)
    end
  end

  describe '#create' do
    context 'with valid params' do
      it 'creates a new Member' do
        expect {
          post :create, {:member => build(:member).as_json}
        }.to change(Member, :count).by(1)
      end

      it 'assigns a newly created member as @member' do
        post :create, {:member => build(:member).as_json}

        expect(response.status).to eql(302)
        expect(assigns(:member)).to be_a(Member)
        expect(assigns(:member)).to be_persisted
      end

      it 'redirects to the created member' do
        post :create, {:member => build(:member).as_json}

        expect(response).to redirect_to(Member.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved member as @member' do
        post :create, {:member => build(:member, first_name: '').as_json}

        expect(response.status).to eql(200)
        expect(assigns(:member)).to be_a_new(Member)
      end

      it "re-renders the 'new' template" do
        post :create, {:member => build(:member, first_name: '').as_json}

        expect(response.status).to eql(200)
        expect(response).to render_template('new')
      end
    end
  end

  describe '#update' do
    context 'with valid params' do
      it 'updates the requested member' do
        member.first_name = 'updated-first-name'


        put :update, {:id => member.id, :member => member.as_json}

        expect(response.status).to eql(302)
        expect(member.reload.first_name).to eql('updated-first-name')
      end

      it 'assigns the requested member as @member' do
        put :update, {:id => member.id, :member => member.as_json}
        expect(assigns(:member)).to eq(member)
      end

      it 'redirects to the member' do
        put :update, {:id => member.id, :member => member.as_json}
        expect(response).to redirect_to(member)
      end
    end

    context 'with invalid params' do
      it 'assigns the member as @member' do
        member.first_name = ''
        put :update, {:id => member.id, :member => member.as_json}
        expect(assigns(:member)).to eq(member)
      end

      it "re-renders the 'edit' template" do
        member.first_name = ''
        put :update, {:id => member.id, :member => member.as_json}
        expect(response).to render_template('edit')
      end
    end
  end

  describe '#destroy' do
    it 'destroys the requested member' do
      delete :destroy, :id => member.id

      expect(Member.where(id: member.id).first).to be_nil
    end

    it 'redirects to the members list' do
      delete :destroy, {:id => member.id}
      expect(response).to redirect_to(members_url)
    end
  end

end
